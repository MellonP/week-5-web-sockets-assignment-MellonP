{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Vault\\\\fullstack - mern\\\\week-5-web-sockets-assignment-MellonP\\\\socketio-chat\\\\client\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/SocketContext.jsx\nimport { createContext, useContext, useEffect, useState, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { initSocket, setupSocketListeners } from '../socket/socketClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(null);\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  /* ---------- state ---------- */\n  const [socket, setSocket] = useState(null);\n  const [userData, setUserData] = useState(null);\n  const [currentRoom, setCurrentRoom] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [usersInRoom, setUsersInRoom] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingTimeout, setTypingTimeout] = useState(null);\n  const navigate = useNavigate();\n\n  /* ---------- 1. create socket once ---------- */\n  useEffect(() => {\n    const s = initSocket();\n    setSocket(s);\n    return () => {\n      s.disconnect();\n      if (typingTimeout) clearTimeout(typingTimeout);\n    };\n  }, []);\n\n  /* ---------- 2. helper to add system message ---------- */\n  const addSystemMessage = useCallback(text => {\n    setMessages(prev => [...prev, {\n      id: Date.now().toString(),\n      content: text,\n      userId: 'system',\n      username: 'System',\n      timestamp: new Date().toISOString(),\n      moodColor: '#6b7280',\n      isSystem: true\n    }]);\n  }, []);\n\n  /* ---------- 3. unified socket‑event handler ---------- */\n  const handleSocketEvent = useCallback((event, data) => {\n    switch (event) {\n      case 'connect':\n        console.log('✅ socket connected');\n        break;\n      case 'disconnect':\n        console.log('❌ socket disconnected');\n        break;\n      case 'connect_error':\n        console.error('Connection error:', data);\n        break;\n      case 'user_data':\n        setUserData(data);\n        break;\n      case 'room_joined':\n        setCurrentRoom(data.roomId);\n        break;\n      case 'user_joined':\n        setUsersInRoom(prev => [...prev, data]);\n        addSystemMessage(`${data.username} joined the room`);\n        break;\n      case 'user_left':\n        setUsersInRoom(prev => prev.filter(u => u.userId !== data.userId));\n        addSystemMessage(`${data.username} left the room`);\n        break;\n      case 'receive_message':\n        setMessages(prev => [...prev, data]);\n        break;\n      case 'anonymous_toggled':\n        setUserData(prev => ({\n          ...prev,\n          ...data\n        }));\n        addSystemMessage(data.isAnonymous ? 'You are now anonymous' : `You are now visible as ${data.username}`);\n        break;\n      case 'language_changed':\n        setUserData(prev => ({\n          ...prev,\n          language: data.language\n        }));\n        addSystemMessage(`Language changed to ${data.language}`);\n        break;\n      case 'room_expired':\n        setCurrentRoom(null);\n        setMessages([]);\n        setUsersInRoom([]);\n        addSystemMessage('This room has expired due to inactivity');\n        navigate('/chat');\n        break;\n      default:\n        console.warn('Unhandled socket event:', event, data);\n    }\n  }, [addSystemMessage, navigate]);\n\n  /* ---------- 4. register / clean listeners when socket ready ---------- */\n  useEffect(() => {\n    if (!socket) return;\n    const cleanup = setupSocketListeners(socket, handleSocketEvent);\n    return () => {\n      cleanup();\n      if (typingTimeout) clearTimeout(typingTimeout);\n    };\n  }, [socket, handleSocketEvent, typingTimeout]);\n\n  /* ---------- 5. actions exposed to app ---------- */\n  const actions = useMemo(() => {\n    /* helper to ensure socket connected once */\n    const ensureConnect = () => new Promise(resolve => {\n      if (!socket) return;\n      if (socket.connected) return resolve();\n      socket.once('connect', resolve);\n      socket.connect();\n    });\n    return {\n      /* login & auto‑join default room */\n      connect: async (userId, username, isAnonymous, language) => {\n        if (!socket) return;\n        await ensureConnect();\n        socket.emit('join_app', {\n          userId,\n          username,\n          isAnonymous,\n          language\n        });\n\n        // auto‑join default room\n        socket.emit('join_room', {\n          roomId: 'general-room',\n          username\n        });\n        setCurrentRoom('general-room');\n        setMessages([]);\n        setUsersInRoom([]);\n      },\n      /* explicit room join */\n      joinRoom: (roomId, username) => {\n        if (!socket) return;\n        socket.emit('join_room', {\n          roomId,\n          username\n        });\n        setCurrentRoom(roomId);\n        setMessages([]);\n        setUsersInRoom([]);\n      },\n      /* send chat message */\n      sendMessage: (content, roomId) => {\n        if (!socket) return;\n        socket.emit('send_message', {\n          content,\n          roomId\n        });\n        setIsTyping(false);\n      },\n      /* toggle anon / language */\n      toggleAnonymous: isAnonymous => socket === null || socket === void 0 ? void 0 : socket.emit('toggle_anonymous', {\n        isAnonymous\n      }),\n      changeLanguage: language => socket === null || socket === void 0 ? void 0 : socket.emit('change_language', {\n        language\n      }),\n      /* typing indicator */\n      handleTyping: () => {\n        if (!socket || !currentRoom) return;\n        if (typingTimeout) clearTimeout(typingTimeout);\n        setIsTyping(true);\n        socket.emit('typing', {\n          roomId: currentRoom,\n          isTyping: true\n        });\n        const t = setTimeout(() => {\n          setIsTyping(false);\n          socket.emit('typing', {\n            roomId: currentRoom,\n            isTyping: false\n          });\n        }, 2000);\n        setTypingTimeout(t);\n      }\n    };\n  }, [socket, currentRoom, typingTimeout]);\n\n  /* ---------- 6. context value ---------- */\n  const value = useMemo(() => ({\n    socket,\n    userData,\n    currentRoom,\n    messages,\n    usersInRoom,\n    isTyping,\n    ...actions\n  }), [socket, userData, currentRoom, messages, usersInRoom, isTyping, actions]);\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n\n/* ---------- hook ---------- */\n_s(SocketProvider, \"rZr0yzF9GbQxc59G0MPF+Ibxd1Q=\", false, function () {\n  return [useNavigate];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const ctx = useContext(SocketContext);\n  if (!ctx) throw new Error('useSocket must be inside SocketProvider');\n  return ctx;\n};\n_s2(useSocket, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useCallback","useMemo","useNavigate","initSocket","setupSocketListeners","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","socket","setSocket","userData","setUserData","currentRoom","setCurrentRoom","messages","setMessages","usersInRoom","setUsersInRoom","isTyping","setIsTyping","typingTimeout","setTypingTimeout","navigate","s","disconnect","clearTimeout","addSystemMessage","text","prev","id","Date","now","toString","content","userId","username","timestamp","toISOString","moodColor","isSystem","handleSocketEvent","event","data","console","log","error","roomId","filter","u","isAnonymous","language","warn","cleanup","actions","ensureConnect","Promise","resolve","connected","once","connect","emit","joinRoom","sendMessage","toggleAnonymous","changeLanguage","handleTyping","t","setTimeout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","ctx","Error","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Vault/fullstack - mern/week-5-web-sockets-assignment-MellonP/socketio-chat/client/src/context/SocketContext.js"],"sourcesContent":["// src/context/SocketContext.jsx\r\nimport {\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n  useCallback,\r\n  useMemo,\r\n} from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { initSocket, setupSocketListeners } from '../socket/socketClient';\r\n\r\nconst SocketContext = createContext(null);\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  /* ---------- state ---------- */\r\n  const [socket, setSocket] = useState(null);\r\n  const [userData, setUserData] = useState(null);\r\n  const [currentRoom, setCurrentRoom] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [usersInRoom, setUsersInRoom] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [typingTimeout, setTypingTimeout] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  /* ---------- 1. create socket once ---------- */\r\n  useEffect(() => {\r\n    const s = initSocket();\r\n    setSocket(s);\r\n\r\n    return () => {\r\n      s.disconnect();\r\n      if (typingTimeout) clearTimeout(typingTimeout);\r\n    };\r\n  }, []);\r\n\r\n  /* ---------- 2. helper to add system message ---------- */\r\n  const addSystemMessage = useCallback((text) => {\r\n    setMessages((prev) => [\r\n      ...prev,\r\n      {\r\n        id: Date.now().toString(),\r\n        content: text,\r\n        userId: 'system',\r\n        username: 'System',\r\n        timestamp: new Date().toISOString(),\r\n        moodColor: '#6b7280',\r\n        isSystem: true,\r\n      },\r\n    ]);\r\n  }, []);\r\n\r\n  /* ---------- 3. unified socket‑event handler ---------- */\r\n  const handleSocketEvent = useCallback(\r\n    (event, data) => {\r\n      switch (event) {\r\n        case 'connect':\r\n          console.log('✅ socket connected');\r\n          break;\r\n        case 'disconnect':\r\n          console.log('❌ socket disconnected');\r\n          break;\r\n        case 'connect_error':\r\n          console.error('Connection error:', data);\r\n          break;\r\n        case 'user_data':\r\n          setUserData(data);\r\n          break;\r\n        case 'room_joined':\r\n          setCurrentRoom(data.roomId);\r\n          break;\r\n        case 'user_joined':\r\n          setUsersInRoom((prev) => [...prev, data]);\r\n          addSystemMessage(`${data.username} joined the room`);\r\n          break;\r\n        case 'user_left':\r\n          setUsersInRoom((prev) =>\r\n            prev.filter((u) => u.userId !== data.userId)\r\n          );\r\n          addSystemMessage(`${data.username} left the room`);\r\n          break;\r\n        case 'receive_message':\r\n          setMessages((prev) => [...prev, data]);\r\n          break;\r\n        case 'anonymous_toggled':\r\n          setUserData((prev) => ({ ...prev, ...data }));\r\n          addSystemMessage(\r\n            data.isAnonymous\r\n              ? 'You are now anonymous'\r\n              : `You are now visible as ${data.username}`\r\n          );\r\n          break;\r\n        case 'language_changed':\r\n          setUserData((prev) => ({ ...prev, language: data.language }));\r\n          addSystemMessage(`Language changed to ${data.language}`);\r\n          break;\r\n        case 'room_expired':\r\n          setCurrentRoom(null);\r\n          setMessages([]);\r\n          setUsersInRoom([]);\r\n          addSystemMessage('This room has expired due to inactivity');\r\n          navigate('/chat');\r\n          break;\r\n        default:\r\n          console.warn('Unhandled socket event:', event, data);\r\n      }\r\n    },\r\n    [addSystemMessage, navigate]\r\n  );\r\n\r\n  /* ---------- 4. register / clean listeners when socket ready ---------- */\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    const cleanup = setupSocketListeners(socket, handleSocketEvent);\r\n    return () => {\r\n      cleanup();\r\n      if (typingTimeout) clearTimeout(typingTimeout);\r\n    };\r\n  }, [socket, handleSocketEvent, typingTimeout]);\r\n\r\n  /* ---------- 5. actions exposed to app ---------- */\r\n  const actions = useMemo(() => {\r\n    /* helper to ensure socket connected once */\r\n    const ensureConnect = () =>\r\n      new Promise((resolve) => {\r\n        if (!socket) return;\r\n        if (socket.connected) return resolve();\r\n        socket.once('connect', resolve);\r\n        socket.connect();\r\n      });\r\n\r\n    return {\r\n      /* login & auto‑join default room */\r\n      connect: async (userId, username, isAnonymous, language) => {\r\n        if (!socket) return;\r\n        await ensureConnect();\r\n        socket.emit('join_app', { userId, username, isAnonymous, language });\r\n\r\n        // auto‑join default room\r\n        socket.emit('join_room', { roomId: 'general-room', username });\r\n        setCurrentRoom('general-room');\r\n        setMessages([]);\r\n        setUsersInRoom([]);\r\n      },\r\n\r\n      /* explicit room join */\r\n      joinRoom: (roomId, username) => {\r\n        if (!socket) return;\r\n        socket.emit('join_room', { roomId, username });\r\n        setCurrentRoom(roomId);\r\n        setMessages([]);\r\n        setUsersInRoom([]);\r\n      },\r\n\r\n      /* send chat message */\r\n      sendMessage: (content, roomId) => {\r\n        if (!socket) return;\r\n        socket.emit('send_message', { content, roomId });\r\n        setIsTyping(false);\r\n      },\r\n\r\n      /* toggle anon / language */\r\n      toggleAnonymous: (isAnonymous) =>\r\n        socket?.emit('toggle_anonymous', { isAnonymous }),\r\n      changeLanguage: (language) =>\r\n        socket?.emit('change_language', { language }),\r\n\r\n      /* typing indicator */\r\n      handleTyping: () => {\r\n        if (!socket || !currentRoom) return;\r\n        if (typingTimeout) clearTimeout(typingTimeout);\r\n\r\n        setIsTyping(true);\r\n        socket.emit('typing', { roomId: currentRoom, isTyping: true });\r\n\r\n        const t = setTimeout(() => {\r\n          setIsTyping(false);\r\n          socket.emit('typing', { roomId: currentRoom, isTyping: false });\r\n        }, 2000);\r\n        setTypingTimeout(t);\r\n      },\r\n    };\r\n  }, [socket, currentRoom, typingTimeout]);\r\n\r\n  /* ---------- 6. context value ---------- */\r\n  const value = useMemo(\r\n    () => ({\r\n      socket,\r\n      userData,\r\n      currentRoom,\r\n      messages,\r\n      usersInRoom,\r\n      isTyping,\r\n      ...actions,\r\n    }),\r\n    [socket, userData, currentRoom, messages, usersInRoom, isTyping, actions]\r\n  );\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>{children}</SocketContext.Provider>\r\n  );\r\n};\r\n\r\n/* ---------- hook ---------- */\r\nexport const useSocket = () => {\r\n  const ctx = useContext(SocketContext);\r\n  if (!ctx) throw new Error('useSocket must be inside SocketProvider');\r\n  return ctx;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}