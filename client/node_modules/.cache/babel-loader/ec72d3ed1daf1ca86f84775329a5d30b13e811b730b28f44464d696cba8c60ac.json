{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\desktop\\\\vault\\\\fullstack - mern\\\\week-5-web-sockets-assignment-MellonP\\\\socketio-chat\\\\client\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { initSocket, setupSocketListeners } from '../socket/socketClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(null);\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [userData, setUserData] = useState(null);\n  const [currentRoom, setCurrentRoom] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [usersInRoom, setUsersInRoom] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingTimeout, setTypingTimeout] = useState(null);\n  const navigate = useNavigate();\n\n  // Initialize socket - runs once on mount\n  useEffect(() => {\n    const newSocket = initSocket();\n    setSocket(newSocket);\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n\n  // Memoized system message helper\n  const addSystemMessage = useCallback(text => {\n    setMessages(prev => [...prev, {\n      id: Date.now().toString(),\n      content: text,\n      userId: 'system',\n      username: 'System',\n      timestamp: new Date().toISOString(),\n      moodColor: '#6b7280',\n      isSystem: true\n    }]);\n  }, []);\n\n  // Consolidated socket event handlers\n  const handleSocketEvent = useCallback((event, data) => {\n    if (!socket) return;\n    switch (event) {\n      case 'connect':\n        console.log('Connected to server');\n        break;\n      case 'disconnect':\n        console.log('Disconnected from server');\n        break;\n      case 'connect_error':\n        console.error('Connection error:', data);\n        break;\n      case 'user_data':\n        setUserData(data);\n        break;\n      case 'room_joined':\n        setCurrentRoom(data.roomId);\n        break;\n      case 'user_joined':\n        setUsersInRoom(prev => [...prev, data]);\n        addSystemMessage(`${data.username} joined the room`);\n        break;\n      case 'user_left':\n        setUsersInRoom(prev => prev.filter(user => user.userId !== data.userId));\n        addSystemMessage(`${data.username} left the room`);\n        break;\n      case 'receive_message':\n        setMessages(prev => [...prev, data]);\n        break;\n      case 'anonymous_toggled':\n        setUserData(prev => ({\n          ...prev,\n          ...data\n        }));\n        addSystemMessage(data.isAnonymous ? 'You are now anonymous' : `You are now visible as ${data.username}`);\n        break;\n      case 'language_changed':\n        setUserData(prev => ({\n          ...prev,\n          language: data.language\n        }));\n        addSystemMessage(`Language changed to ${data.language}`);\n        break;\n      case 'room_expired':\n        setCurrentRoom(null);\n        setMessages([]);\n        setUsersInRoom([]);\n        addSystemMessage('This room has expired due to inactivity');\n        navigate('/chat');\n        break;\n      default:\n        console.warn('Unhandled socket event:', event, data);\n    }\n  }, [socket, addSystemMessage, navigate]);\n\n  // Setup socket listeners when socket changes\n  useEffect(() => {\n    if (!socket) return;\n    const cleanup = setupSocketListeners(socket, handleSocketEvent);\n    return () => {\n      cleanup();\n      if (typingTimeout) clearTimeout(typingTimeout);\n    };\n  }, [socket, handleSocketEvent, typingTimeout]);\n\n  // Memoized socket actions\n  const socketActions = useMemo(() => ({\n    connect: (userId, username, isAnonymous, language) => {\n      socket === null || socket === void 0 ? void 0 : socket.emit('connect_user', {\n        userId,\n        username,\n        isAnonymous,\n        language\n      });\n    },\n    joinRoom: (roomId, username) => {\n      if (!socket) return;\n      socket.emit('join_room', {\n        roomId,\n        username\n      });\n      setMessages([]);\n      setUsersInRoom([]);\n    },\n    sendMessage: (content, roomId) => {\n      socket === null || socket === void 0 ? void 0 : socket.emit('send_message', {\n        content,\n        roomId\n      });\n      setIsTyping(false);\n    },\n    toggleAnonymous: isAnonymous => {\n      socket === null || socket === void 0 ? void 0 : socket.emit('toggle_anonymous', {\n        isAnonymous\n      });\n    },\n    changeLanguage: language => {\n      socket === null || socket === void 0 ? void 0 : socket.emit('change_language', {\n        language\n      });\n    },\n    handleTyping: () => {\n      if (!socket || !currentRoom) return;\n      if (typingTimeout) clearTimeout(typingTimeout);\n      setIsTyping(true);\n      socket.emit('typing', {\n        roomId: currentRoom,\n        isTyping: true\n      });\n      const timeout = setTimeout(() => {\n        setIsTyping(false);\n        socket.emit('typing', {\n          roomId: currentRoom,\n          isTyping: false\n        });\n      }, 2000);\n      setTypingTimeout(timeout);\n    }\n  }), [socket, currentRoom, typingTimeout]);\n\n  // Memoize context value\n  const contextValue = useMemo(() => ({\n    socket,\n    userData,\n    currentRoom,\n    messages,\n    usersInRoom,\n    isTyping,\n    ...socketActions\n  }), [socket, userData, currentRoom, messages, usersInRoom, isTyping, socketActions]);\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(SocketProvider, \"TMzaCtJbEBxrYx4B+yASCg+9RAo=\", false, function () {\n  return [useNavigate];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n_s2(useSocket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useCallback","useMemo","useNavigate","initSocket","setupSocketListeners","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","socket","setSocket","userData","setUserData","currentRoom","setCurrentRoom","messages","setMessages","usersInRoom","setUsersInRoom","isTyping","setIsTyping","typingTimeout","setTypingTimeout","navigate","newSocket","disconnect","addSystemMessage","text","prev","id","Date","now","toString","content","userId","username","timestamp","toISOString","moodColor","isSystem","handleSocketEvent","event","data","console","log","error","roomId","filter","user","isAnonymous","language","warn","cleanup","clearTimeout","socketActions","connect","emit","joinRoom","sendMessage","toggleAnonymous","changeLanguage","handleTyping","timeout","setTimeout","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/user/desktop/vault/fullstack - mern/week-5-web-sockets-assignment-MellonP/socketio-chat/client/src/context/SocketContext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState, useCallback, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { initSocket, setupSocketListeners } from '../socket/socketClient';\r\n\r\nconst SocketContext = createContext(null);\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [userData, setUserData] = useState(null);\r\n  const [currentRoom, setCurrentRoom] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [usersInRoom, setUsersInRoom] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [typingTimeout, setTypingTimeout] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // Initialize socket - runs once on mount\r\n  useEffect(() => {\r\n    const newSocket = initSocket();\r\n    setSocket(newSocket);\r\n\r\n    return () => {\r\n      newSocket.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  // Memoized system message helper\r\n  const addSystemMessage = useCallback((text) => {\r\n    setMessages(prev => [...prev, {\r\n      id: Date.now().toString(),\r\n      content: text,\r\n      userId: 'system',\r\n      username: 'System',\r\n      timestamp: new Date().toISOString(),\r\n      moodColor: '#6b7280',\r\n      isSystem: true\r\n    }]);\r\n  }, []);\r\n\r\n  // Consolidated socket event handlers\r\n  const handleSocketEvent = useCallback((event, data) => {\r\n    if (!socket) return;\r\n\r\n    switch (event) {\r\n      case 'connect':\r\n        console.log('Connected to server');\r\n        break;\r\n      case 'disconnect':\r\n        console.log('Disconnected from server');\r\n        break;\r\n      case 'connect_error':\r\n        console.error('Connection error:', data);\r\n        break;\r\n      case 'user_data':\r\n        setUserData(data);\r\n        break;\r\n      case 'room_joined':\r\n        setCurrentRoom(data.roomId);\r\n        break;\r\n      case 'user_joined':\r\n        setUsersInRoom(prev => [...prev, data]);\r\n        addSystemMessage(`${data.username} joined the room`);\r\n        break;\r\n      case 'user_left':\r\n        setUsersInRoom(prev => prev.filter(user => user.userId !== data.userId));\r\n        addSystemMessage(`${data.username} left the room`);\r\n        break;\r\n      case 'receive_message':\r\n        setMessages(prev => [...prev, data]);\r\n        break;\r\n      case 'anonymous_toggled':\r\n        setUserData(prev => ({ ...prev, ...data }));\r\n        addSystemMessage(\r\n          data.isAnonymous \r\n            ? 'You are now anonymous' \r\n            : `You are now visible as ${data.username}`\r\n        );\r\n        break;\r\n      case 'language_changed':\r\n        setUserData(prev => ({ ...prev, language: data.language }));\r\n        addSystemMessage(`Language changed to ${data.language}`);\r\n        break;\r\n      case 'room_expired':\r\n        setCurrentRoom(null);\r\n        setMessages([]);\r\n        setUsersInRoom([]);\r\n        addSystemMessage('This room has expired due to inactivity');\r\n        navigate('/chat');\r\n        break;\r\n      default:\r\n        console.warn('Unhandled socket event:', event, data);\r\n    }\r\n  }, [socket, addSystemMessage, navigate]);\r\n\r\n  // Setup socket listeners when socket changes\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    const cleanup = setupSocketListeners(socket, handleSocketEvent);\r\n\r\n    return () => {\r\n      cleanup();\r\n      if (typingTimeout) clearTimeout(typingTimeout);\r\n    };\r\n  }, [socket, handleSocketEvent, typingTimeout]);\r\n\r\n  // Memoized socket actions\r\n  const socketActions = useMemo(() => ({\r\n    connect: (userId, username, isAnonymous, language) => {\r\n      socket?.emit('connect_user', { userId, username, isAnonymous, language });\r\n    },\r\n    joinRoom: (roomId, username) => {\r\n      if (!socket) return;\r\n      socket.emit('join_room', { roomId, username });\r\n      setMessages([]);\r\n      setUsersInRoom([]);\r\n    },\r\n    sendMessage: (content, roomId) => {\r\n      socket?.emit('send_message', { content, roomId });\r\n      setIsTyping(false);\r\n    },\r\n    toggleAnonymous: (isAnonymous) => {\r\n      socket?.emit('toggle_anonymous', { isAnonymous });\r\n    },\r\n    changeLanguage: (language) => {\r\n      socket?.emit('change_language', { language });\r\n    },\r\n    handleTyping: () => {\r\n      if (!socket || !currentRoom) return;\r\n      \r\n      if (typingTimeout) clearTimeout(typingTimeout);\r\n      \r\n      setIsTyping(true);\r\n      socket.emit('typing', { roomId: currentRoom, isTyping: true });\r\n      \r\n      const timeout = setTimeout(() => {\r\n        setIsTyping(false);\r\n        socket.emit('typing', { roomId: currentRoom, isTyping: false });\r\n      }, 2000);\r\n      \r\n      setTypingTimeout(timeout);\r\n    }\r\n  }), [socket, currentRoom, typingTimeout]);\r\n\r\n  // Memoize context value\r\n  const contextValue = useMemo(() => ({\r\n    socket,\r\n    userData,\r\n    currentRoom,\r\n    messages,\r\n    usersInRoom,\r\n    isTyping,\r\n    ...socketActions\r\n  }), [socket, userData, currentRoom, messages, usersInRoom, isTyping, socketActions]);\r\n\r\n  return (\r\n    <SocketContext.Provider value={contextValue}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSocket = () => {\r\n  const context = useContext(SocketContext);\r\n  if (!context) {\r\n    throw new Error('useSocket must be used within a SocketProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}