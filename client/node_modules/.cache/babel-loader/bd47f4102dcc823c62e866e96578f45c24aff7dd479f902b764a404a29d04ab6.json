{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Vault\\\\fullstack - mern\\\\week-5-web-sockets-assignment-MellonP\\\\socketio-chat\\\\client\\\\src\\\\context\\\\SocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/SocketContext.jsx\nimport { createContext, useContext, useEffect, useState, useCallback, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { initSocket, setupSocketListeners } from '../socket/socketClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(null);\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  /* ---------- state ---------- */\n  const [socket, setSocket] = useState(null);\n  const [userData, setUserData] = useState(null);\n  const [currentRoom, setCurrentRoom] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [usersInRoom, setUsersInRoom] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingTimeout, setTypingTimeout] = useState(null);\n  const navigate = useNavigate();\n\n  /* ---------- 1. create socket once ---------- */\n  useEffect(() => {\n    const s = initSocket();\n    setSocket(s);\n    return () => s.disconnect();\n  }, []);\n\n  /* ---------- 2. helper to add system message ---------- */\n  const addSystemMessage = useCallback(text => {\n    setMessages(prev => [...prev, {\n      id: Date.now().toString(),\n      content: text,\n      userId: 'system',\n      username: 'System',\n      timestamp: new Date().toISOString(),\n      moodColor: '#6b7280',\n      isSystem: true\n    }]);\n  }, []);\n\n  /* ---------- 3. unified socket‑event handler ---------- */\n  const handleSocketEvent = useCallback((event, data) => {\n    // (same switch‑statement as before) …\n    switch (event) {\n      case 'connect':\n        console.log('✅ socket connected');\n        break;\n      // … all other cases unchanged …\n      default:\n        console.warn('Unhandled socket event:', event, data);\n    }\n  }, [addSystemMessage, navigate]);\n\n  /* ---------- 4a. register / clean listeners when socket ready ---------- */\n  useEffect(() => {\n    if (!socket) return;\n    const cleanup = setupSocketListeners(socket, handleSocketEvent);\n    return () => cleanup();\n  }, [socket, handleSocketEvent]);\n\n  /* ---------- 4b. clear typingTimeout on unmount ---------- */\n  useEffect(() => {\n    return () => {\n      if (typingTimeout) clearTimeout(typingTimeout);\n    };\n  }, [typingTimeout]);\n\n  /* ---------- 5. actions exposed to app ---------- */\n  const actions = useMemo(() => {\n    // (ensureConnect + connect / joinRoom / sendMessage … unchanged)\n    const ensureConnect = () => new Promise(resolve => {\n      if (!socket) return;\n      if (socket.connected) return resolve();\n      socket.once('connect', resolve);\n      socket.connect();\n    });\n    return {\n      connect: async (userId, username, isAnonymous, language) => {\n        if (!socket) return;\n        await ensureConnect();\n        socket.emit('join_app', {\n          userId,\n          username,\n          isAnonymous,\n          language\n        });\n        socket.emit('join_room', {\n          roomId: 'general-room',\n          username\n        });\n        setCurrentRoom('general-room');\n        setMessages([]);\n        setUsersInRoom([]);\n      },\n      joinRoom: (roomId, username) => {\n        if (!socket) return;\n        socket.emit('join_room', {\n          roomId,\n          username\n        });\n        setCurrentRoom(roomId);\n        setMessages([]);\n        setUsersInRoom([]);\n      },\n      sendMessage: (content, roomId) => {\n        if (!socket) return;\n        socket.emit('send_message', {\n          content,\n          roomId\n        });\n        setIsTyping(false);\n      },\n      toggleAnonymous: isAnonymous => socket === null || socket === void 0 ? void 0 : socket.emit('toggle_anonymous', {\n        isAnonymous\n      }),\n      changeLanguage: language => socket === null || socket === void 0 ? void 0 : socket.emit('change_language', {\n        language\n      }),\n      handleTyping: () => {\n        if (!socket || !currentRoom) return;\n        if (typingTimeout) clearTimeout(typingTimeout);\n        setIsTyping(true);\n        socket.emit('typing', {\n          roomId: currentRoom,\n          isTyping: true\n        });\n        const t = setTimeout(() => {\n          setIsTyping(false);\n          socket.emit('typing', {\n            roomId: currentRoom,\n            isTyping: false\n          });\n        }, 2000);\n        setTypingTimeout(t);\n      }\n    };\n  }, [socket, currentRoom, typingTimeout]);\n\n  /* ---------- 6. context value ---------- */\n  const value = useMemo(() => ({\n    socket,\n    userData,\n    currentRoom,\n    messages,\n    usersInRoom,\n    isTyping,\n    ...actions\n  }), [socket, userData, currentRoom, messages, usersInRoom, isTyping, actions]);\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n\n/* ---------- hook ---------- */\n_s(SocketProvider, \"oISrYkAHDR5DPzNi6lTxdjndGwk=\", false, function () {\n  return [useNavigate];\n});\n_c = SocketProvider;\nexport const useSocket = () => {\n  _s2();\n  const ctx = useContext(SocketContext);\n  if (!ctx) throw new Error('useSocket must be inside SocketProvider');\n  return ctx;\n};\n_s2(useSocket, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useCallback","useMemo","useNavigate","initSocket","setupSocketListeners","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","socket","setSocket","userData","setUserData","currentRoom","setCurrentRoom","messages","setMessages","usersInRoom","setUsersInRoom","isTyping","setIsTyping","typingTimeout","setTypingTimeout","navigate","s","disconnect","addSystemMessage","text","prev","id","Date","now","toString","content","userId","username","timestamp","toISOString","moodColor","isSystem","handleSocketEvent","event","data","console","log","warn","cleanup","clearTimeout","actions","ensureConnect","Promise","resolve","connected","once","connect","isAnonymous","language","emit","roomId","joinRoom","sendMessage","toggleAnonymous","changeLanguage","handleTyping","t","setTimeout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSocket","_s2","ctx","Error","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Vault/fullstack - mern/week-5-web-sockets-assignment-MellonP/socketio-chat/client/src/context/SocketContext.js"],"sourcesContent":["// src/context/SocketContext.jsx\r\nimport {\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n  useCallback,\r\n  useMemo,\r\n} from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { initSocket, setupSocketListeners } from '../socket/socketClient';\r\n\r\nconst SocketContext = createContext(null);\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n  /* ---------- state ---------- */\r\n  const [socket, setSocket] = useState(null);\r\n  const [userData, setUserData] = useState(null);\r\n  const [currentRoom, setCurrentRoom] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [usersInRoom, setUsersInRoom] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [typingTimeout, setTypingTimeout] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  /* ---------- 1. create socket once ---------- */\r\n  useEffect(() => {\r\n    const s = initSocket();\r\n    setSocket(s);\r\n    return () => s.disconnect();\r\n  }, []);\r\n\r\n  /* ---------- 2. helper to add system message ---------- */\r\n  const addSystemMessage = useCallback((text) => {\r\n    setMessages((prev) => [\r\n      ...prev,\r\n      {\r\n        id: Date.now().toString(),\r\n        content: text,\r\n        userId: 'system',\r\n        username: 'System',\r\n        timestamp: new Date().toISOString(),\r\n        moodColor: '#6b7280',\r\n        isSystem: true,\r\n      },\r\n    ]);\r\n  }, []);\r\n\r\n  /* ---------- 3. unified socket‑event handler ---------- */\r\n  const handleSocketEvent = useCallback(\r\n    (event, data) => {\r\n      // (same switch‑statement as before) …\r\n      switch (event) {\r\n        case 'connect':\r\n          console.log('✅ socket connected');\r\n          break;\r\n        // … all other cases unchanged …\r\n        default:\r\n          console.warn('Unhandled socket event:', event, data);\r\n      }\r\n    },\r\n    [addSystemMessage, navigate]\r\n  );\r\n\r\n  /* ---------- 4a. register / clean listeners when socket ready ---------- */\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    const cleanup = setupSocketListeners(socket, handleSocketEvent);\r\n    return () => cleanup();\r\n  }, [socket, handleSocketEvent]);\r\n\r\n  /* ---------- 4b. clear typingTimeout on unmount ---------- */\r\n  useEffect(() => {\r\n    return () => {\r\n      if (typingTimeout) clearTimeout(typingTimeout);\r\n    };\r\n  }, [typingTimeout]);\r\n\r\n  /* ---------- 5. actions exposed to app ---------- */\r\n  const actions = useMemo(() => {\r\n    // (ensureConnect + connect / joinRoom / sendMessage … unchanged)\r\n    const ensureConnect = () =>\r\n      new Promise((resolve) => {\r\n        if (!socket) return;\r\n        if (socket.connected) return resolve();\r\n        socket.once('connect', resolve);\r\n        socket.connect();\r\n      });\r\n\r\n    return {\r\n      connect: async (userId, username, isAnonymous, language) => {\r\n        if (!socket) return;\r\n        await ensureConnect();\r\n        socket.emit('join_app', { userId, username, isAnonymous, language });\r\n        socket.emit('join_room', { roomId: 'general-room', username });\r\n        setCurrentRoom('general-room');\r\n        setMessages([]);\r\n        setUsersInRoom([]);\r\n      },\r\n      joinRoom: (roomId, username) => {\r\n        if (!socket) return;\r\n        socket.emit('join_room', { roomId, username });\r\n        setCurrentRoom(roomId);\r\n        setMessages([]);\r\n        setUsersInRoom([]);\r\n      },\r\n      sendMessage: (content, roomId) => {\r\n        if (!socket) return;\r\n        socket.emit('send_message', { content, roomId });\r\n        setIsTyping(false);\r\n      },\r\n      toggleAnonymous: (isAnonymous) =>\r\n        socket?.emit('toggle_anonymous', { isAnonymous }),\r\n      changeLanguage: (language) =>\r\n        socket?.emit('change_language', { language }),\r\n      handleTyping: () => {\r\n        if (!socket || !currentRoom) return;\r\n        if (typingTimeout) clearTimeout(typingTimeout);\r\n\r\n        setIsTyping(true);\r\n        socket.emit('typing', { roomId: currentRoom, isTyping: true });\r\n\r\n        const t = setTimeout(() => {\r\n          setIsTyping(false);\r\n          socket.emit('typing', { roomId: currentRoom, isTyping: false });\r\n        }, 2000);\r\n        setTypingTimeout(t);\r\n      },\r\n    };\r\n  }, [socket, currentRoom, typingTimeout]);\r\n\r\n  /* ---------- 6. context value ---------- */\r\n  const value = useMemo(\r\n    () => ({\r\n      socket,\r\n      userData,\r\n      currentRoom,\r\n      messages,\r\n      usersInRoom,\r\n      isTyping,\r\n      ...actions,\r\n    }),\r\n    [socket, userData, currentRoom, messages, usersInRoom, isTyping, actions]\r\n  );\r\n\r\n  return (\r\n    <SocketContext.Provider value={value}>{children}</SocketContext.Provider>\r\n  );\r\n};\r\n\r\n/* ---------- hook ---------- */\r\nexport const useSocket = () => {\r\n  const ctx = useContext(SocketContext);\r\n  if (!ctx) throw new Error('useSocket must be inside SocketProvider');\r\n  return ctx;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}